type ::= id | number | string | function
id ::= [a-zA-Z_][a-zA-Z0-9_]*
number ::= '-'?[0-9]+
string ::= '"' [^"]* '"'                /* This passes https://www.bottlecaps.de/rr/ui */
function ::= id "(" type ("," type)* ")"    /* Example: f(x) */

program ::= ("Participants:" participants ";")
            ("Knowledge:" knowledge_list ";")?
            ("KeyRelations:" keyRelations ";")?
            ("Functions:" functions_def ";")?
            ("Equations:" equations ";")?
            ("Format:" formats ";")?
            ("Icons:" "{" iconSet* "}" ";")?
            ("Protocol:" "{" stmt* "}" ";")
            end

end ::= "eof"

/* ---- Protocol ---- */
stmt ::=
    message_send_stmt
    | match_stmt
    | clear_stmt
    | call_stmt
    | participant_stmt

message_send_stmt ::= id "->" id ":" expression ("," expression)* ";"   /* Example: alice -> bob: key, key2*/

expression ::= type | encrypt_expr | sign_expr
encrypt_expr ::= "{" expression ("," expression)* "}" type  /* Example: {exp(g,X)}inv(pk(A)); */
sign_expr ::= "{|" expression ("," expression)* "|}" type   /* Example: {|msgA|}aKey; */

match_exprt ::= id "->" id ":" " match " "{" match_case+ "}" ";"    /* Example: alice -> bob: match { "refuse": { ... }; }; */
match_case ::= type ":" "{" stmt* "}" ";"                           /* Example: "refuse": { ... }; */

clear_stmt ::= "clear" ":" id ("," id)* ";"   /* Example: clear akey; */

call_stmt ::= function ("," function)*";"   /* Example: f(x); */

participant_stmt ::= id ": " (new_stmt | set_stmt) ";"  /* Example: Alice: new msgA; */

new_stmt ::= "new " id      /* Example: Alice: new msgA; */
set_stmt ::= id ":=" type   /* Example: TPM: pid := "1" ; */

/* ---- Participants ---- */
participants ::= participant ("," participant)* /* Example: alice, bob */
participant ::= id                              /* Example: alice */

/* ---- Knowledge ---- */
knowledge_list ::= "{" knowledge* "}" ";"                                   /* Example: {Alice: X, msgA; Bob: Y, msgB; Shared: g; }; */
knowledge ::= participant ":" type ("," type)* ";"    /* Example: Alice: X, msgA; */

/* ---- KeyRelations ---- */
keyRelations ::= keyRelation ("," keyRelation)*                                     /* Example: KeyRelations: (sk:tmp_sk, pk:tpm_pk), (pk:a_pk, sk:a_sk); */
keyRelation ::= "(" ("pk" ":" id "," "sk" ":" id)|("sk" ":" id "," "pk" ":" id) ")" /* Example: (sk:tmp_sk, pk:tpm_pk) */

/* ---- Functions ---- */
functions_def ::= function_def ("," function_def)*  /* Example: f/1, g/2 */
function_def ::= id "/" number                      /* Example: f/1 */

/* ---- Equations ---- */
equations ::= equations_element ("," equations_element)*    /* Example: f(x) = x + 1, g(x, y) = x + y */
equations_element ::= function "=>" function                /* Example: exp(exp(g,X),Y) => exp(exp(g,Y),X) */

/* ---- Format ---- */
formats ::= format ("," format)*                        /* Example: exp(x,y) = $x^y$ */
format ::= type "=" string | latex   /* Example: exp(x,y) = $x^y$ */

/* ---- Icons ---- */
iconSet ::= string ":" id ("," id)* ";" /* Example: "üë©‚Äçüë¶": "Alice", "Bob"; */

/* --- Latex ---  */
latex ::= "$" [^$]* "$" /* Example: $x^y$ */

/* --- Statement comments --- */
stmtComment ::= "?" string | latex /* Example: ? "This is a comment" */