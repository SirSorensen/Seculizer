type ::= id | number | string | function

id ::= [a-zA-Z_][a-zA-Z0-9_]*
number ::= '-'?[0-9]+
string ::= '"' [^"]* '"' /* This passes https://www.bottlecaps.de/rr/ui */
function ::= id "(" id ("," id)* ")"

program ::= top_level_stmt* end

end ::= "eof"

top_level_stmt ::= "Protocol:" stmt* ";" /* Example: Perticipants: { ... }; */
                 | "Participants:" principles ";" /* Example: principles: alice, bob; */
                 | "Format:" formats ";" /* Example: formats: exp(x,y) = $x^y$; */
                 | "Knowledge:" (knowledge_list | knowledge) ";" /* Example Knowledge: {Alice: X, msgA; Bob: Y, msgB; Shared: g;};*/
                 | "Functions:" functions_def ";" /* Example: Functions: f/1, g/2; */
                 | "Equations:" equations ";" /* Example: Equations: f(x) = x + 1; */

/* ---- Protocol ---- */
stmt ::=
    message_send_stmt
    | match_stmt
    | clear_stmt
    | call_stmt
    | participant_stmt

expression ::= type | encrypt_expr | sign_expr

message_send_stmt ::= id "->" id ":" message_expr ";" /* Example: alice -> bob: key*/

message_expr ::= /* Could have id "=" id as well, but it creates confusion in what it is saved as what */
	expression "as" id
	| expression

match_exprt ::= id "->" id ":" " match " "{" match_case+ "}" ";" /* Example: alice -> bob: match { "refuse": { ... }; }; */
match_case ::= type ":" "{" stmt "}" ";" /* Example: "refuse": { ... }; */

encrypt_expr ::= "{" expression "}" type /* Example: {exp(g,X)}inv(pk(A)); */
sign_expr ::= "{|" expression "|}" type /* Example: {|msgA|}aKey; */

clear_stmt ::= "clear" id ";" /* Example: clear akey; */

call_stmt ::= function ";" /* Example: f(x); */

participant_stmt ::= id ": " (new_stmt | set_stmt)

new_stmt ::= "new " id ";" /* Example: Alice: new msgA; */
set_stmt ::= id ":=" type ";" /* Example: TPM: pid := "1" ; */

/* ---- Principles ---- */
principles ::= principle ("," principle)* /* Example: alice, bob */
principle ::= id /* Example: alice */

/* ---- Formats ---- */
formats ::= format ("," format)* /* Example: exp(x,y) = $x^y$ */
format ::= id "(" id ("," id)* ")" "=" string | latex /* Example: exp(x,y) = $x^y$ */

/* --- Latex ---  */
latex ::= "$" [^$]* "$"

/* ---- Knowledge ---- */
knowledge_list ::= "{" knowledge+ "}" ";" /* Example: {Alice: X, msgA; Bob: Y, msgB; Shared: g; }; */
knowledge ::= principle ":" knowledge_item ("," knowledge_item)* ";" /* Example: Alice: X, msgA; */
knowledge_item ::= id | function /* Example: X, msgA; */

/* ---- Functions ---- */
functions_def ::= function_def ("," function_def)* /* Example: f/1, g/2 */
function_def ::= id "/" number /* Example: f/1 */

/* ---- Equations ---- */
equations ::= equation ("," equation)* /* Example: f(x) = x + 1, g(x, y) = x + y */
equation ::= id "(" id ("," id)* ")" "=" id "(" id ("," id)* ")" /* Example: f(x) = x + 1 */