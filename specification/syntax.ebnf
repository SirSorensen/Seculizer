type ::= id | number | string

id ::= [a-zA-Z_][a-zA-Z0-9_]*
number ::= '-'?[0-9]+
string ::= '"' [^"]* '"' /* This passes https://www.bottlecaps.de/rr/ui */

program ::= top_level_stmt* end

end ::= "eof"

top_level_stmt ::= "Protocol:" stmt* ";" /* Example: protocol: { ... }; */
                 | "Principles:" principles ";" /* Example: principles: alice, bob; */
                 | "Functions:" functions ";" /* Example: Functions: f/1, g/2; */
                 | "Equations:" equations ";" /* Example: Equations: f(x) = x + 1; */

/* ---- Protocol ---- */
stmt ::=
    message_send_stmt
    | match_stmt
    | encrypt_stmt
    | sign_stmt
    | clear_stmt
    | call_stmt

message_send_stmt ::= id "->" id ":" message_stmt ";" /* Example: alice -> bob: akey = key; ALTERNATIVE VERSION: alice -> bob: key*/

message_stmt ::= /* Could have id "=" id as well, but it creates confusion in what it is saved as what */
	id "as" id
	| id

match_stmt ::= id "->" id ": match {" match_case+ "};" /* Example: alice -> bob: match { "refuse": { ... }; }; */
match_case ::= type ": {" stmt "};" /* Example: "refuse": { ... }; */

encrypt_stmt ::= "{" stmt "}" (id | call_stmt) /* Example: {exp(g,X)}inv(pk(A)); */
sign_stmt ::= "{|" stmt "|}" (id | call_stmt) /* Example: {|msgA|}aKey; */

clear_stmt ::= "clear" id ";" /* Example: clear akey; */

call_stmt ::= id "(" id ("," id)* ")" ";" /* Example: f(x); */

/* ---- Principles ---- */
principles ::= principle ("," principle)* /* Example: alice, bob */
principle ::= id /* Example: alice */

/* ---- Functions ---- */
functions ::= function ("," function)* /* Example: f/1, g/2 */
function ::= id "/" number /* Example: f/1 */

/* ---- Equations ---- */
equations ::= equation ("," equation)* /* Example: f(x) = x + 1, g(x, y) = x + y */
equation ::= id "(" id ("," id)* ")" "=" id "(" id ("," id)* ")" /* Example: f(x) = x + 1 */